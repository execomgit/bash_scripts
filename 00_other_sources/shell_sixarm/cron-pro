#!/bin/sh
out () { printf %s\\n "$*" ; }
err () { >&2 printf %s\\n "$*" ; }
log () { out $( now ) "$*" }
now () { out $( date -u "+%Y-%m-%dT%H:%M:%SZ" ) }

# Launch a cron job like a professional.
#
# By https://orchestrate.io/blog/2014/03/31/cron-in-production-that-is-a-double-edged-sword/
#
#  1. Use `flock` to create a file write lock.
#  2. Use `sleep` to help distribute workloads across a minute.
#  3. Use `nice` to be friendly with other processes.
#  4. Use `date` with UTC and ISO to timestamp the run.
#  5. Redirect stderr to stdin, suitable for logging.
#  6. Use `while` to read each stdin line, then timestamp it, then log it.
#  7. Always return true.
#
#     1 * * * *
#       (
#         flock -w 0 200 &&
#         sleep $((RANDOM%60)) &&
#         nice /command/to/run &&
#         date -u "+%Y-%m-%dT%H:%M:%SZ" > /var/run/last_successful_run
#       ) 2>&1 200> /var/run/cron_job_lock |
#     while read line ; echo -e `date -u "+%Y-%m-%dT%H:%M:%SZ"` "$line" ; done > /path/to/the/log || true


NAME=${NAME:-$1}
RUNFILE=${LOCKFILE:-/var/run/$USER/$NAME.run}
LOGFILE=${LOGFILE:-/var/log/$USER/$NAME.log}
LOCKFILE=${LOCKFILE:-/var/run/$USER/$NAME.lock}
NICE=${NICE:-/usr/bin/nice}

out "NAME" $NAME
out "LOGFILE" $LOGFILE
out "LOCKFILE" $LOCKFILE
out "EXITFILE" $EXITFILE
out "STRFTIME" $STRFTIME

exec > "$LOGFILE" 2>&1
exec 200>> "$LOCKFILE"
flock -w 0 -x 200
sleep $((RANDOM%60))
$NICE "$@" 2>&1 | while read line ; do log "$line" ; done
EXIT=$?
log $EXIT > "$RUNFILE"
