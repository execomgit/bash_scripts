# useful aliases
alias mka='schedtool -B -n 1 -e ionice -n 1 make -j$(cat /proc/cpuinfo | grep "^processor" | wc -l) "$@"'
alias reposync='repo sync -j$(cat /proc/cpuinfo | grep "^processor" | wc -l)'
alias fuck='sudo $(history -p \!\!)'
alias editbash='nano ~/.bashrc'
alias sourcebash='. ~/.bashrc'
alias aptget='sudo apt-get'
alias minicom='sudo minicom'
alias connectwear='adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444'

# Uncompressed zip
function bloatzip()
{
   if [ -z $1 -o $2 ]; then
       echo -e "Please provide the zip name and directory to be zipped"
       exit 1
   fi
   zip -rn *:: $1 $2

}

# copy file to clipboard
alias clipboard='xclip -sel clip'

# Add/update an APK's classes.dex
function add-dex()
{
    local APK=$1
    local DEX=$2
    if [ -z $APK -o -z $DEX ]; then
        echo -e "Must provide an apk and classes.dex"
        echo -e "add-dex <apk> <dex to add/update>"
        return 1
    fi
    zip -gjq $APK $DEX
}

# Add/update an APK's resource file in res/
function add-resource()
{
    local APK=$1
    APK_NAME=${APK%%.*}
    RESOURCE_PATH=$2
    DIR=$(pwd)

    echo -e "Adding $RESOURCE_PATH to $APK"
    (cd apk/$APK_NAME/build/apk; zip -g $DIR/$APK $RESOURCE_PATH)
}

# Add/update an APK's resources.arsc
function add-arsc()
{
    local APK=$1
    local ARSC=$2
    if [ -z $APK -o -z $ARSC ]; then
        echo -e "Must provide an apk and resources.arsc"
        echo -e "add-arsc <apk> <arsc to add/update>"
        return 1
    fi
    zip -gjq $APK $ARSC
}

# grep the current project tree
function treegrep()
{
    find . -name .repo -prune -o -name .git -prune -o -regextype posix-egrep -iregex '.*\.(c|h|cpp|S|java|xml|smali)' -type f -print0 | xargs -0 grep --color -n -i "$@"
}

# pydroid aliases
alias repacksystem='sudo pydroid system pack . system.img'
alias unpacksystem='sudo pydroid system unpack system.img .'
alias repackboot='sudo pydroid boot pack boot boot.img'
alias unpackboot='sudo pydroid boot unpack boot.img boot'
alias repackrecovery='sudo pydroid recovery pack recovery recovery.img'
alias unpackrecovery='sudo pydroid recovery unpack recovery.img recovery'

# LZ4 compressed extraction
function lz4unpack()
{
    INPUT_LZ4=$1
    OUTPUT_LZ4=${INPUT_LZ4%%.*}
    if [ -z $INPUT_LZ4 ]; then
        echo -e "Please provide the lz4 compressed ramdisk"
        exit 1
    fi
    lz4 -d $INPUT_LZ4 $OUTPUT_LZ4
}

# LZ4 compression
function lz4repack()
{
    INPUT_LZ4=$1
    OUTPUT_LZ4=${INPUT_LZ4}.gz

    if [ -z $INPUT_LZ4 ]; then
        echo -e "Please provide the ramdisk to be lz4 compressed"
        exit 1
    fi
    lz4 -l -9 $INPUT_LZ4 $OUTPUT_LZ4
}

# Create ramdisk
function create-ramdisk()
{
    if [ ! -f init ]; then
        echo -e "No ramdisk directory found."
        exit 1
    fi
    find . | cpio -o -H newc | gzip > ../ramdisk.gz
}

# Extract ramdisk
function extract-ramdisk()
{
    RAMDISK=$(find ../ -name ramdisk*)
    if [ -z "$RAMDISK" ]; then
        echo -e "No ramdisk found in parent directory"
        exit 1
    fi
    gunzip -c $RAMDISK | cpio -i
}

#github utils
# Relace user and password locally
function create-org-repo()
{
    local org=$1
    local repo=$2
    curl -u 'user:password' https://api.github.com/orgs/$org/repos -d '{"name":"'$repo'"}'
}
function create-repo()
{
    repo=$1
    curl -u 'user:password' https://api.github.com/user/repos -d '{"name":"'$repo'"}'
}

# git aliases
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gd='git diff'
alias gca='git commit --amend'
alias gcaa='git commit --amend --author'
alias gcs='git commit -s'
alias gco='git checkout'
alias gco--='git checkout --'
alias gl='git log'
alias glo='git log --oneline'
alias gp='git push'
alias gpom='git push origin master'
alias gpu='git pull'
alias gpum='git pull origin master'
alias gr='git remote'
alias grv='git revert'
alias gs='git status'
alias ghard='git reset --hard'
alias gpick='git cherry-pick'
alias gclean='git clean -xfd'



